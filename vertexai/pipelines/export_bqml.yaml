name: Export bqml model
inputs:
- {name: project_id, type: String}
- {name: model, type: String}
- {name: bucket_name, type: String}
outputs:
- {name: model_name, type: String}
- {name: destination, type: String}
implementation:
  container:
    image: gcr.io/on-prem-project-337210/bq_vertexai_container:latest
    command:
    - sh
    - -ec
    - |
      program_path=$(mktemp)
      printf "%s" "$0" > "$program_path"
      python3 -u "$program_path" "$@"
    - |
      def export_bqml_model(project_id, model, bucket_name):
          import subprocess
          import shutil
          #bq extract -m {PROJECT_ID}:{DATASET_NAME}.{MODEL_NAME} gs://{BUCKET_NAME}/{MODEL_NAME}
          model_name = '{}:{}'.format(project_id, model)
          destination = 'gs://{}/{}'.format(bucket_name, model)
          print (model_name)

          subprocess.run(
              (
                  shutil.which("bq"),
                  "extract",
                  "--project_id=" + project_id,
                  "-m",
                  model_name,
                  destination
              ),
              stderr=subprocess.PIPE,
              check=True)
          return (model, destination)

      def _serialize_str(str_value: str) -> str:
          if not isinstance(str_value, str):
              raise TypeError('Value "{}" has type "{}" instead of str.'.format(
                  str(str_value), str(type(str_value))))
          return str_value

      import argparse
      _parser = argparse.ArgumentParser(prog='Export bqml model', description='')
      _parser.add_argument("--project-id", dest="project_id", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--model", dest="model", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("--bucket-name", dest="bucket_name", type=str, required=True, default=argparse.SUPPRESS)
      _parser.add_argument("----output-paths", dest="_output_paths", type=str, nargs=2)
      _parsed_args = vars(_parser.parse_args())
      _output_files = _parsed_args.pop("_output_paths", [])

      _outputs = export_bqml_model(**_parsed_args)

      _output_serializers = [
          _serialize_str,
          _serialize_str,

      ]

      import os
      for idx, output_file in enumerate(_output_files):
          try:
              os.makedirs(os.path.dirname(output_file))
          except OSError:
              pass
          with open(output_file, 'w') as f:
              f.write(_output_serializers[idx](_outputs[idx]))
    args:
    - --project-id
    - {inputValue: project_id}
    - --model
    - {inputValue: model}
    - --bucket-name
    - {inputValue: bucket_name}
    - '----output-paths'
    - {outputPath: model_name}
    - {outputPath: destination}
